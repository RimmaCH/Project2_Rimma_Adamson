import IssueModal from '../pages/IssueModal';
import { faker } from '@faker-js/faker';

function selectReporterBabyYoda() {
  cy.get('[data-testid="select:reporterId"]').click();
  cy.get('[data-testid="select-option:Baby Yoda"]').click();
}
function selectReporterPickleRick() {
  cy.get('[data-testid="select:reporterId"]').click();
  cy.get('[data-testid="select-option:Pickle Rick"]').click();
}
function selectAssigneePickleRick() {
  cy.get('[data-testid="form-field:userIds"]').click();
  cy.get('[data-testid="select-option:Pickle Rick"]').click();
}
function selectAssigneLordGaben() {
  cy.get('[data-testid="form-field:userIds"]').click();
  cy.get('[data-testid="select-option:Lord Gaben"]').click();
}
function selectAssigneBabyYoda() {
  cy.get('[data-testid="form-field:userIds"]').click();
  cy.get('[data-testid="select-option:Baby Yoda"]').click();
}
function selectIssueTypeStory() {
  cy.get('[data-testid="select:type"]').click();
  cy.get('[data-testid="select-option:Story"]')
    .wait(1000)
    .trigger('mouseover')
    .trigger('click');
  cy.get('[data-testid="icon:story"]').should('be.visible');
}
function selectIssueTypeBug() {
  cy.get('[data-testid="select:type"]').click();
  cy.get('[data-testid="select-option:Bug"]')
    .wait(1000)
    .trigger('mouseover')
    .trigger('click');
  cy.get('[data-testid="icon:bug"]').should('be.visible');
}
function selectPriorityHighest() {
  cy.get('[data-testid="select:priority"]').click();
  cy.get('[data-testid="select-option:Highest"]').click();
}
function selectPriorityLow() {
  cy.get('[data-testid="select:priority"]').click();
  cy.get('[data-testid="select-option:Low"]').click();
}
function IssuecreateConfirmation() {
  cy.get('[data-testid="modal:issue-create"]').should('not.exist');
  cy.contains('Issue has been successfully created.').should('be.visible');
}
function reloadpage() {
  cy.reload();
  cy.contains('Issue has been successfully created.').should('not.exist');
}

describe('Issue create/ generated by Rimma', () => {
  beforeEach(() => {
    cy.visit('/');
    cy.url()
      .should('eq', `${Cypress.env('baseUrl')}project/board`)
      .then((url) => {
        cy.visit(url + '/board?modal-issue-create=true');
      });
  });

  it('Should create an issue and validate it successfully', () => {
    // System finds modal for creating issue and does next steps inside of it
    cy.get('[data-testid="modal:issue-create"]').within(() => {
      // Type value to description input field
      cy.get('.ql-editor').type('TEST_DESCRIPTION');
      cy.get('.ql-editor').should('have.text', 'TEST_DESCRIPTION');
      // Type value to title input field
      // Order of filling in the fields is first description, then title on purpose
      // Otherwise filling title first sometimes doesn't work due to web page implementation
      cy.get('input[name="title"]').type('TEST_TITLE');
      cy.get('input[name="title"]').should('have.value', 'TEST_TITLE');
      // Open issue type dropdown and choose Story
      selectIssueTypeStory();
      // Select Baby Yoda from reporter dropdown
      selectReporterBabyYoda();
      // Select Pickle Rick from assignee dropdown
      selectAssigneePickleRick();
      // Click on button "Create issue"
      cy.get('button[type="submit"]').click();
    });
    // Assert that modal window is closed and successful message is visible
    IssuecreateConfirmation();
    // Reload the page to be able to see recently created issue
    // Assert that successful message has dissappeared after the reload
    reloadpage();
    // Assert than only one list with name Backlog is visible and do steps inside of it
    cy.get('[data-testid="board-list:backlog"]')
      .should('be.visible')
      .and('have.length', '1')
      .within(() => {
        // Assert that this list contains 5 issues and first element with tag p has specified text
        cy.get('[data-testid="list-issue"]')
          .should('have.length', '5')
          .first()
          .find('p')
          .contains('TEST_TITLE')
          .siblings()
          .within(() => {
            //Assert that correct avatar and type icon are visible
            cy.get('[data-testid="avatar:Pickle Rick"]').should('be.visible');
            cy.get('[data-testid="icon:story"]').should('be.visible');
          });
      });

    cy.get('[data-testid="board-list:backlog"]')
      .contains('TEST_TITLE')
      .within(() => {
        // Assert that correct avatar and type icon are visible
        cy.get('[data-testid="avatar:Pickle Rick"]').should('be.visible');
        cy.get('[data-testid="icon:story"]').should('be.visible');
      });
  });

  it('Should validate title is required field if missing', () => {
    // System finds modal for creating issue and does next steps inside of it
    cy.get('[data-testid="modal:issue-create"]').within(() => {
      // Try to click create issue button without filling any data
      cy.get('button[type="submit"]').click();
      // Assert that correct error message is visible
      cy.get('[data-testid="form-field:title"]').should(
        'contain',
        'This field is required'
      );
    });
  });

  it('Should create a BUG by Pickle Rick and validate it successfully', () => {
    cy.get('[data-testid="modal:issue-create"]').within(() => {
      cy.get('.ql-editor').type('My bug description');
      cy.get('.ql-editor').should('have.text', 'My bug description');

      cy.get('input[name="title"]').type('TEST_TITLE');
      cy.get('input[name="title"]').should('have.value', 'TEST_TITLE');

      selectIssueTypeBug();
      selectReporterPickleRick();
      selectAssigneLordGaben();
      selectPriorityHighest();

      cy.get('button[type="submit"]').click();
    });

    IssuecreateConfirmation();
    reloadpage();

    cy.get('[data-testid="board-list:backlog"]', { timeout: 60000 })
      .should('be.visible')
      .and('have.length', '1')
      .within(() => {
        cy.get('[data-testid="list-issue"]')
          .should('have.length', '5')
          .first()
          .find('p')
          .contains('TEST_TITLE')
          .siblings()
          .within(() => {
            cy.get('[data-testid="avatar:Lord Gaben"]').should('be.visible');
            cy.get('[data-testid="icon:bug"]').should('be.visible');
          });
      });

    cy.get('[data-testid="board-list:backlog"]')
      .contains('TEST_TITLE')
      .within(() => {
        cy.get('[data-testid="avatar:Lord Gaben"]').should('be.visible');
        cy.get('[data-testid="icon:bug"]').should('be.visible');
      });
  });

  it('Should create new issue using the random data plugin', () => {
    cy.get('[data-testid="modal:issue-create"]').within(() => {
      const randomWord = faker.word.noun();
      const randomWords = faker.word.words(10);

      cy.log(randomWord);
      cy.log(randomWords);

      cy.get('.ql-editor').type(randomWords);
      cy.get('.ql-editor').should('have.text', randomWords);

      cy.get('input[name="title"]').type(randomWord);
      cy.get('input[name="title"]').should('have.value', randomWord);

      selectReporterBabyYoda();
      selectAssigneBabyYoda();
      selectPriorityLow();

      cy.get('button[type="submit"]').click();
    });

    IssuecreateConfirmation();
    reloadpage();

    cy.get('[data-testid="board-list:backlog"]')
      .should('be.visible')
      .and('have.length', '1')
      .within(() => {
        cy.get('[data-testid="list-issue"]')
          .should('have.length', '5')
          .first()
          .find('p')
          .should('be.visible')
          .siblings()
          .within(() => {
            cy.get('[data-testid="avatar:Baby Yoda"]').should('be.visible');
            cy.get('[data-testid="icon:task"]').should('be.visible');
          });
      });

    cy.get('[data-testid="board-list:backlog"]')
      .should('be.visible')
      .within(() => {
        cy.get('[data-testid="avatar:Baby Yoda"]').should('be.visible');
        cy.get('[data-testid="icon:task"]').should('be.visible');
      });
  });
});
